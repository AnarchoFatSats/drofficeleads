AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodeBuild project to build CRM Docker image'

Parameters:
  ECRRepositoryURI:
    Type: String
    Default: "337909762852.dkr.ecr.us-east-1.amazonaws.com/cura-genesis-crm"
    Description: ECR repository URI for the CRM image

Resources:
  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: '*'

  # CodeBuild Project
  CRMBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: cura-genesis-crm-build
      Description: Build and push CRM Docker image to ECR
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: cura-genesis-crm
          - Name: IMAGE_TAG
            Value: latest
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
                - echo Repository URI is $REPOSITORY_URI
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - |
                  cat > Dockerfile << 'EOF'
                  FROM python:3.11-slim

                  WORKDIR /app

                  # Install system dependencies
                  RUN apt-get update && apt-get install -y \
                      curl \
                      gcc \
                      && rm -rf /var/lib/apt/lists/*

                  # Copy requirements first for better caching
                  COPY requirements.txt .
                  RUN pip install --no-cache-dir -r requirements.txt

                  # Copy application code
                  COPY . .

                  # Create non-root user
                  RUN useradd -m -u 1000 crmuser && chown -R crmuser:crmuser /app
                  USER crmuser

                  # Health check
                  HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
                    CMD curl -f http://localhost:8001/health || exit 1

                  # Expose port
                  EXPOSE 8001

                  # Run the application
                  CMD ["python", "crm_main.py"]
                  EOF
                - |
                  cat > requirements.txt << 'EOF'
                  fastapi==0.104.1
                  uvicorn[standard]==0.24.0
                  sqlalchemy==2.0.23
                  psycopg2-binary==2.9.9
                  alembic==1.13.0
                  python-jose[cryptography]==3.3.0
                  passlib[bcrypt]==1.7.4
                  python-multipart==0.0.6
                  redis==5.0.1
                  pydantic==2.5.0
                  pydantic-settings==2.1.0
                  python-dotenv==1.0.0
                  structlog==23.2.0
                  prometheus-client==0.19.0
                  EOF
                - echo "Building CRM image..."
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - echo Image pushed successfully
      TimeoutInMinutes: 30

Outputs:
  CodeBuildProjectName:
    Description: Name of the CodeBuild project
    Value: !Ref CRMBuildProject
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildProject' 